#include <FastLED.h>
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>

#define DATA_PIN 2
#define ENC_PIN_A 12
#define ENC_PIN_B 13
#define ENC_PIN_BUTTON 14
#define PIN_BUTTON 16

#define NUM_LEDS 256
#define JSON_BUFF_DIMENSION 2500
#define frameInterval 100 // Framerate = 10 fps

byte dayOfWeekLEDs_off[7][18] = {
  {176,175,160, 144,143,128,  112,111,96,   80,79,64,     48,47,32,     16,15,0},
  {255,240,239, 144,143,128,  112,111,96,   80,79,64,     48,47,32,     16,15,0},
  {255,240,239, 223,208,207,  112,111,96,   80,79,64,     48,47,32,     16,15,0},
  {255,240,239, 223,208,207,  191,176,175,  80,79,64,     48,47,32,     16,15,0},
  {255,240,239, 223,208,207,  191,176,175,  159,144,143,  48,47,32,     16,15,0},
  {255,240,239, 223,208,207,  191,176,175,  159,144,143,  127,112,111,  16,15,0},
  {255,240,239, 223,208,207,  191,176,175,  159,144,143,  127,112,111,  95,80,79},
};

byte dayOfWeekLEDs_on[7][6] = {
  {240,239,224,223,208,207}, 
  {208,207,192,191,176,175}, 
  {176,175,160,159,144,143}, 
  {144,143,128,127,112,111}, 
  {112,111,96,95,80,79}, 
  {80,79,64,63,48,47}, 
  {48,47,32,31,16,15}, 
};

bool wifiSpinner[10][8][32] = {
  { // 0
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
  },
  { // 2
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0}
  },
  { // 3
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0}
  },
  { // 4
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}
  },
  { // 5
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 6
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 7
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 8
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 9
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }
};

bool numbers3x5[10][5][3] = {
  { // 0
    {1,1,1},
    {1,0,1},
    {1,0,1},
    {1,0,1},
    {1,1,1}
  },
  { // 1 
    {0,1,0},
    {1,1,0},
    {0,1,0},
    {0,1,0},
    {1,1,1}
  },
  { // 2
    {1,1,1},
    {0,0,1},
    {1,1,1},
    {1,0,0},
    {1,1,1}
  },
  { // 3
    {1,1,1},
    {0,0,1},
    {0,1,1},
    {0,0,1},
    {1,1,1}
  },
  { // 4
    {1,0,1},
    {1,0,1},
    {1,1,1},
    {0,0,1},
    {0,0,1}
  },
  { // 5
    {1,1,1},
    {1,0,0},
    {1,1,1},
    {0,0,1},
    {1,1,1}
  },
  { // 6
    {1,1,1},
    {1,0,0},
    {1,1,1},
    {1,0,1},
    {1,1,1}
  },
  { // 7
    {1,1,1},
    {0,0,1},
    {0,0,1},
    {0,0,1},
    {0,0,1}
  },
  { // 8
    {1,1,1},
    {1,0,1},
    {1,1,1},
    {1,0,1},
    {1,1,1}
  },
  { // 9
    {1,1,1},
    {1,0,1},
    {1,1,1},
    {0,0,1},
    {1,1,1}
  }
};

bool numbers3x6[10][6][3] = {
  { // 0
    {1,1,1},
    {1,0,1},
    {1,0,1},
    {1,0,1},
    {1,0,1},
    {1,1,1}
  },
  { // 1 
    {0,1,0},
    {1,1,0},
    {0,1,0},
    {0,1,0},
    {0,1,0},
    {1,1,1}
  },
  { // 2
    {1,1,1},
    {0,0,1},
    {0,0,1},
    {0,1,0},
    {1,0,0},
    {1,1,1}
  },
  { // 3
    {1,1,1},
    {0,0,1},
    {0,1,0},
    {0,0,1},
    {0,0,1},
    {1,1,1}
  },
  { // 4
    {0,0,1},
    {0,1,1},
    {1,0,1},
    {1,1,1},
    {0,0,1},
    {0,0,1}
  },
  { // 5
    {1,1,1},
    {1,0,0},
    {1,1,0},
    {0,0,1},
    {0,0,1},
    {1,1,1}
  },
  { // 6
    {0,1,1},
    {1,0,0},
    {1,1,1},
    {1,0,1},
    {1,0,1},
    {1,1,1}
  },
  { // 7
    {1,1,1},
    {0,0,1},
    {0,1,0},
    {1,0,0},
    {1,0,0},
    {1,0,0}
  },
  { // 8
    {1,1,1},
    {1,0,1},
    {1,1,1},
    {1,0,1},
    {1,0,1},
    {1,1,1}
  },
  { // 9
    {1,1,1},
    {1,0,1},
    {1,0,1},
    {1,1,1},
    {0,0,1},
    {1,1,0}
  }
};

bool numbers4x8[10][8][4] = {
  { // 0
    {0,1,1,0},
    {1,0,0,1},
    {1,0,0,1},
    {1,0,1,1},
    {1,1,0,1},
    {1,0,0,1},
    {1,0,0,1},
    {0,1,1,0}
  },
  { // 1 
    {0,0,1,0},
    {0,1,1,0},
    {0,0,1,0},
    {0,0,1,0},
    {0,0,1,0},
    {0,0,1,0},
    {0,0,1,0},
    {0,1,1,1}
  },
  { // 2
    {0,1,1,0},
    {1,0,0,1},
    {0,0,0,1},
    {0,0,1,0},
    {0,1,0,0},
    {1,0,0,0},
    {1,0,0,0},
    {1,1,1,1}
  },
  { // 3
    {0,1,1,0},
    {1,0,0,1},
    {0,0,0,1},
    {0,0,1,0},
    {0,0,0,1},
    {0,0,0,1},
    {1,0,0,1},
    {0,1,1,0}
  },
  { // 4
    {0,0,1,0},
    {0,1,0,0},
    {1,0,0,0},
    {1,0,0,0},
    {1,0,1,0},
    {1,1,1,1},
    {0,0,1,0},
    {0,0,1,0}
  },
  { // 5
    {1,1,1,1},
    {1,0,0,0},
    {1,0,0,0},
    {1,1,1,0},
    {0,0,0,1},
    {0,0,0,1},
    {0,0,0,1},
    {1,1,1,0}
  },
  { // 6
    {0,1,1,0},
    {1,0,0,1},
    {1,0,0,0},
    {1,1,1,0},
    {1,0,0,1},
    {1,0,0,1},
    {1,0,0,1},
    {0,1,1,0}
  },
  { // 7
    {1,1,1,1},
    {0,0,0,1},
    {0,0,0,1},
    {0,0,1,0},
    {0,1,0,0},
    {1,0,0,0},
    {1,0,0,0},
    {1,0,0,0}
  },
  { // 8
    {0,1,1,0},
    {1,0,0,1},
    {1,0,0,1},
    {0,1,1,0},
    {1,0,0,1},
    {1,0,0,1},
    {1,0,0,1},
    {0,1,1,0}
  },
  { // 9
    {0,1,1,0},
    {1,0,0,1},
    {1,0,0,1},
    {1,0,0,1},
    {0,1,1,1},
    {0,0,0,1},
    {1,0,0,1},
    {0,1,1,0}
  }
};

bool numbers6x8[10][8][6] = {
  { // 0
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0}
  },
  { // 1
    {0,0,1,1,0,0},
    {0,1,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,1,1,1,1,0}
  },
  { // 2
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {0,0,0,0,1,1},
    {0,0,0,1,1,0},
    {0,0,1,1,0,0},
    {0,1,1,0,0,0},
    {1,1,0,0,0,0},
    {1,1,1,1,1,1}
  },
  { // 3
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {0,0,0,0,1,1},
    {0,0,1,1,1,0},
    {0,0,0,0,1,1},
    {0,0,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0}
  },
  { // 4
    {0,0,0,1,1,0},
    {0,0,1,1,0,0},
    {0,1,1,0,0,0},
    {1,1,0,0,0,0},
    {1,1,0,1,1,0},
    {1,1,1,1,1,1},
    {0,0,0,1,1,0},
    {0,0,0,1,1,0}
  },
  { // 5
    {1,1,1,1,1,1},
    {1,1,0,0,0,0},
    {1,1,0,0,0,0},
    {1,1,1,1,1,0},
    {0,0,0,0,1,1},
    {0,0,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0}
  },
  { // 6
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {1,1,0,0,0,0},
    {1,1,1,1,1,0},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0}
  },
  { // 7
    {1,1,1,1,1,1},
    {0,0,0,0,1,1},
    {0,0,0,0,1,1},
    {0,0,0,1,1,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0},
    {0,0,1,1,0,0}
  },
  { // 8
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0}
  },
  { // 9
    {0,1,1,1,1,0},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,1},
    {0,0,0,0,1,1},
    {1,1,0,0,1,1},
    {0,1,1,1,1,0}
  }  
};

bool colon1x4[1][4][1] = {
  {
    {1},
    {0},
    {0},
    {1},
  }
};

bool colon2x6[1][6][2] = {
  {
    {1,1},
    {1,1},
    {0,0},
    {0,0},
    {1,1},
    {1,1}
  }
};

bool minus[1][1][2] = {
  {
    {1,1}
  }
};

// 2xx: Thunderstorm;
bool weatherThunderstorm[3][7][3] = {
  {
    {0,0,0},
    {0,0,0},
    {0,0,0},
    {0,0,0},
    {0,0,0},
    {0,0,0},
    {0,0,0}
  },
  {
    {0,0,1},
    {0,0,1},
    {0,1,0},
    {1,0,0},
    {1,0,0},
    {0,1,0},
    {0,1,0}
  },
  {
    {0,0,1},
    {0,0,0},
    {0,0,0},
    {0,0,0},
    {0,0,0},
    {0,1,0},
    {0,1,0}
  }
};
// 3xx: Drizzle
bool weatherDrizzle[20][8][20] = {
  { // 0
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 2
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 3
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0}
  },
  { // 4
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 5
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 6
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 7
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 8
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 9
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 10
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
  },
  { // 11
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 12
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0}
  },
  { // 13
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 14
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 15
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 16
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0}
  },
  { // 17
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0}
  },
  { // 18
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 19
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
};
// 5xx: Rain
bool weatherRain[10][8][20] = {
  { // 0
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0}
  },
  { // 2
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 3
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 4
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 5
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
  },
  { // 6
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0}
  },
  { // 7
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 8
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0}
  },
  { // 9
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
};
// 6xx: Snow
bool weatherSnow[20][8][20] = {
  { // 0
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 2
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 3
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0}
  },
  { // 4
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 5
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 6
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 7
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0}
  },
  { // 8
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 9
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 10
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}
  },
  { // 11
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 12
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0}
  },
  { // 13
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 14
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 15
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 16
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0}
  },
  { // 17
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0}
  },
  { // 18
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 19
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
};
// 7xx: Atmosphere
bool weatherAtmosphere[4][8][20] = {
  { // 0
    {0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
    {0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 1
    {0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
    {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1},
    {0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
    {0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  { // 2
    {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1},
    {0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
    {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0},
    {0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1}
  },
  { // 3
    {0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1},
    {0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
    {0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
    {0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1}
  }
};
// 800: Clear
bool weatherClear[2][6][6] = {
  {
    {0,0,0,0,0,0},
    {0,0,1,1,0,0},
    {0,1,1,1,1,0},
    {0,1,1,1,1,0},
    {0,0,1,1,0,0},
    {0,0,0,0,0,0}
  },
  {
    {0,0,1,1,0,0},
    {0,1,0,0,1,0},
    {1,0,0,0,0,1},
    {1,0,0,0,0,1},
    {0,1,0,0,1,0},
    {0,0,1,1,0,0}

  }
};
// 80x: Clouds
bool weatherClouds[8][6][16] = {
  {
    {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1},
    {0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
    {0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0},
    {0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0},
    {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
    {0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1},
    {0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1},
    {0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1},
    {0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
  {
    {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
    {0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1},
    {0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  },
};

int counter = 0; 
bool encCurState;
bool encLastState;  

const unsigned long postInterval = 10*10*60;
unsigned long int lastConnectionFrame = 0;     // last frame you connected to the server, in frames

unsigned long int prevFrameTime = 0;
unsigned long int frameCounter = 0;

const char* ssid     = "53_2.4GHz";
const char* password = "5355353553";
const char* hostname = "LED-clock";

const char* OWMhost = "api.openweathermap.org";
String city = "Moscow,RU";
String apiKey = "___"; // Edited to comply with the rules of OWM. Enter your own api key here

CRGB leds[NUM_LEDS];

WiFiUDP ntpUDP;

NTPClient timeClient(ntpUDP, "pool.ntp.org", 10800);

WiFiClient client;
String text;
int jsonend = 0;
boolean startJson = false;
byte status = WL_IDLE_STATUS;

volatile byte brightnessCounter = 12;
volatile bool buttonPressed = 0;
volatile bool buttonPressedThisFrame = 0;
volatile bool encoderPressed = 0;
volatile bool encoderPressedThisFrame = 0;

volatile unsigned long int encoderLastPlus = 0;
volatile unsigned long int encoderLastMinus = 0;
volatile unsigned long int encoderLastButton = 0;
volatile unsigned long int lastButton = 0;

byte brightnessNoVolatile = 126; 
bool buttonPressedNoVolatile = 0; 
bool encoderPressedNoVolatile = 0; 

const byte encoderDelay = 2;
const byte encoderDelayReverse = 100;
const byte buttonDelay = 20;

float tempNow = 0.0;
short weatherNow = 0;
float tempLater = 0.0;
short weatherLater = 0;

bool errorConnection = 0;
bool errorJson = 0;
bool errorWeather = 0;
bool errorTime = 0;
bool errorDisplay = 0;

byte displayCounter = 0;

// ======== Read inputs with interrupts ======

void IRAM_ATTR readEncoderPlus(){
  if (millis()-encoderLastMinus > encoderDelayReverse && digitalRead(ENC_PIN_B) && millis()-encoderLastPlus > encoderDelay) {
    brightnessCounter = min(brightnessCounter+1, 20);
    encoderLastPlus = millis();
  }
}

void IRAM_ATTR readEncoderMinus(){
  if (millis()-encoderLastPlus > encoderDelayReverse && digitalRead(ENC_PIN_A) && millis()-encoderLastMinus > encoderDelay) {
    brightnessCounter = max(brightnessCounter-1, 5);
    encoderLastMinus = millis();
  }
}

void IRAM_ATTR readEncoderButton(){
  if(millis()-encoderLastButton > buttonDelay) {
    if(!encoderPressed){
      encoderPressed = 1;
      encoderPressedThisFrame = 1;
    } else {
      encoderPressed = 0;
    }
    encoderLastButton = millis();
  }
}

void IRAM_ATTR readButton(){
  if(millis()-lastButton > buttonDelay) {
    if(!buttonPressed){
      buttonPressed = 1;
      buttonPressedThisFrame = 1;
    } else {
      buttonPressed = 0;
    }
    lastButton = millis();
  }
}

// ======== setup ========

void setup() {
  delay(1000);
  
  pinMode (ENC_PIN_A,INPUT);
  pinMode (ENC_PIN_B,INPUT);
  pinMode (ENC_PIN_BUTTON,INPUT);
  pinMode (PIN_BUTTON,INPUT);

  attachInterrupt(digitalPinToInterrupt(ENC_PIN_A), readEncoderPlus, FALLING);
  attachInterrupt(digitalPinToInterrupt(ENC_PIN_B), readEncoderMinus, FALLING);
  attachInterrupt(digitalPinToInterrupt(ENC_PIN_BUTTON), readEncoderButton, CHANGE);
  attachInterrupt(digitalPinToInterrupt(PIN_BUTTON), readButton, CHANGE);

  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  FastLED.clear();

  Serial.begin(115200);
  Serial.println();

  WiFi.setHostname(hostname);
  WiFi.begin(ssid, password);
  Serial.print("Wifi.begin( ");
  Serial.print(ssid);
  Serial.print(" , ");
  Serial.print(password);
  Serial.println(" ) ...");

  int i = 0;
  while (WiFi.status() != WL_CONNECTED) { // Wait for the Wi-Fi to connect
    FastLED.clear();
    drawArray( &wifiSpinner[0][0][0], i%10, 0, 0, 32, 8, CHSV(220,255,brightnessNoVolatile));
    i++;
    FastLED.show();
    delay(100);
  }

  Serial.println("Connection established!");  
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  timeClient.begin();

  text.reserve(JSON_BUFF_DIMENSION);
}

// ======== main loop ========

void loop() {
  FastLED.clear();

  if (( frameCounter > 100 && lastConnectionFrame == 0 ) || ( frameCounter - lastConnectionFrame > postInterval )) {
    Serial.println("lastConnectionFrame = " + String(lastConnectionFrame));
    Serial.println("postInterval = " + String(postInterval));
    Serial.println("frameCounter = "  + String(frameCounter));
    lastConnectionFrame = frameCounter;
    makehttpRequest();
  }

  noInterrupts();
  brightnessNoVolatile = 54+brightnessCounter*brightnessCounter/2; //16 pos: 66..254; dif: 6,6,8,8,10,10,12,12,14,14,16,16,18,18,20
  //brightnessNoVolatile = 54+brightnessCounter*brightnessCounter/10; //32 pos: 65..254; dif: 3,3,4,4,4,4,4,4,5,5,5,5,6,6,6,6,6,6,7,7,7,7,8,8,8,8,8,8,9,9,9
  buttonPressedNoVolatile = buttonPressedThisFrame == 1 || buttonPressedThisFrame == 0 ? buttonPressedThisFrame : 0;
  encoderPressedNoVolatile = encoderPressedThisFrame == 1 || encoderPressedThisFrame == 0 ? encoderPressedThisFrame : 0;

  if(encoderPressedNoVolatile) {
    displayCounter = displayCounter+1 > 5 ? 0 : displayCounter+1;
  }
  interrupts();

  drawDisplay(displayCounter, brightnessNoVolatile);

  if ( errorConnection || errorJson || errorWeather || errorTime ) {
    drawErrors(brightnessNoVolatile);
  }
  
  noInterrupts();
  FastLED.show();
  FastLED.show();
  interrupts();
  
  encoderPressedNoVolatile = 0;
  encoderPressedThisFrame = 0;
  buttonPressedNoVolatile = 0;
  buttonPressedThisFrame = 0;

  if ( frameCounter % 10 == 0 ) {
    Serial.println( "errors: " + (String)errorConnection + " " + (String)errorJson + " " + (String)errorWeather 
    + " " + (String)errorTime + " " + (String)errorDisplay 
    + " , weather: " + (String)weatherLater + " , display: " + (String)displayCounter + " , brightness: " + (String)brightnessNoVolatile);
  }

  if ( millis() - prevFrameTime < frameInterval ) {
    delay( frameInterval - ( millis() - prevFrameTime ) );
  }
  frameCounter += ( millis()-prevFrameTime ) / frameInterval;
  prevFrameTime = ( millis() / frameInterval ) * frameInterval;
}

// ======== Draw one of several variants of display ========

void drawDisplay(byte variant, byte brightness){
  errorDisplay = 0;
  switch (variant) {
    case 0:
      drawClock(1, CHSV(220,255,brightness));  
      break;
    case 1:
      drawWeather(weatherLater, brightness);
      drawClock(1, CHSV(220,255,brightness));  
      break;
    case 2:
      drawTemp(22, 3, CHSV(190,255,brightness));
      drawClock(2, CHSV(220,255,brightness));
      break;
    case 3:
      drawWeather(weatherLater, brightness);
      drawTemp(22, 3, CHSV(190,255,brightness));
      drawClock(2, CHSV(220,255,brightness));
      break;
    case 4:
      drawTemp(22, 1, CHSV(190,255,brightness));
      drawDayOfWeek(timeClient.getDay(),
        CHSV(160,128,brightness/2),
        CHSV(160,255,brightness),
        CHSV(0,128,brightness/2),
        CHSV(0,255,brightness));
      drawClock(3, CHSV(220,255,brightness));
      break;
    case 5:
      drawWeather(weatherLater, brightness);
      drawTemp(22, 1, CHSV(190,255,brightness));
      drawDayOfWeek(timeClient.getDay(),
        CHSV(160,128,brightness/2),
        CHSV(160,255,brightness),
        CHSV(0,128,brightness/2),
        CHSV(0,255,brightness));
      drawClock(3, CHSV(220,255,brightness));
      break;
    default:
      errorDisplay = 1;
      drawClock(2, CHSV(220,255,brightness));      
      break;
  };
}

// ======== Map XY coordinates to LED number with XY starting from specified corner ========

int mapToMatrix(int x, int y, char* corner) { //corner: lr, ll, ul, ur
  int led = 0;
  x = x % 32;
  y = y % 8;
  
  if (corner == "lr") {
      led = ( x % 2 == 0 ) ? x * 8 + y : (x + 1) * 8 - y - 1;
  }
  if (corner == "ll") {
      led = ( x % 2 == 1 ) ? (31 - x) * 8 + y : (32 - x) * 8 - y - 1;
  }
  if (corner == "ul") {
      led = ( x % 2 == 0 ) ? (31 - x) * 8 + y : (32 - x) * 8 - y - 1;
  }
  if (corner == "ur") {
      led = ( x % 2 == 1 ) ? x * 8 + y : (x + 1) * 8 - y - 1;
  }

  return led;
}

// ======== Request weather data from OpenWeatherMaps, parse JSON and fill variables ========

void makehttpRequest() {
  client.stop();
  text = "";

  if (client.connect(OWMhost,80)){
    errorConnection = 0;
    Serial.println("Connecting to OWM...");
    client.println("GET /data/2.5/forecast?q=" + city + "&APPID=" + apiKey + "&mode=json&units=metric&cnt=2 HTTP/1.1");
    client.println("Host: api.openweathermap.org");
    client.println("User-Agent: ArduinoWiFi/1.1");
    client.println("Connection: close");
    client.println();
  } else {
    errorConnection = 1;
    Serial.println("Connection failed"); 
    client.stop();
  }

  Serial.println("client.connected() = " + String(client.connected())); 
  Serial.println("client.available() = " + String(client.available())); 

  Serial.println("Waiting for client availability");
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      errorConnection = 1;
      Serial.println(" Client Timeout !");
      client.stop();
      return;
    }
  }

  bool jsonStart = 0;
  int jsonCounter = 0;

  char c = 0;
  while (client.connected() || client.available()) {
    c = client.read();
    
    if (c == '{') {
      jsonStart = 1;
      jsonCounter++;
    }

    if (c == '}') {
      jsonCounter--;
    }
    
    if (jsonStart == 1) {
      text += c;
      delay(1);
    }

    if (jsonStart == 1 && jsonCounter == 0){
      break;
    }
  }
  Serial.println("OK. client.stop()");
  client.stop();
  //text.replace('[', ' ');
  //text.replace(']', ' ');

  char jsonArray [text.length()+1];
  text.toCharArray(jsonArray,sizeof(jsonArray));

  Serial.println(jsonArray);

  DynamicJsonDocument doc(JSON_BUFF_DIMENSION);
  DeserializationError error = deserializeJson(doc, jsonArray);
  
  if (error) {
    errorJson = 1;
    Serial.print("deserializeJson() failed: ");
    Serial.println(error.f_str());
    return;
  }
  errorJson = 0;

  JsonArray list = doc["list"];
  JsonObject now = list[0];
  JsonObject later = list[1];

  String city = doc["city"]["name"];
  
  tempNow = now["main"]["temp"];
  weatherNow = now["weather"][0]["id"];
  tempLater = later["main"]["temp"];
  weatherLater = later["weather"][0]["id"];
  
  Serial.println("parseJson(): finished");
  Serial.println("tempNow = " + String(tempNow));
  Serial.println("weatherNow = " + String(weatherNow));
  Serial.println("tempLater = " + String(tempLater));
  Serial.println("weatherLater = " + String(weatherLater));
}

// ======== Draw N-th frame of animation stored in array of bools ========

void drawArray (bool *array, int n, int x, int y, int w, int h, CHSV color) {
  for (int i = 0; i < w; i++){
    for (int j = 0; j < h; j++){
      if (array[w*h*n+j*w+i]) { // has pixel
        leds[ mapToMatrix(x+i,y+j,"ul") ] = color;
      }
    }
  }
}

// ======== Draw lines on the bottom, representing current day of week ========

void drawDayOfWeek(byte day, CHSV weekdayOff, CHSV weekday, CHSV weekendOff, CHSV weekend) {
  day = day == 0 ? 6 : day - 1; // make sunday the last day
  if (day < 5) { // weekday
    for (int i = 0; i < 12; i++) {
      leds[ dayOfWeekLEDs_off[day][i] ] = weekdayOff;
    }
    for (int i = 12; i < 18; i++) {
      leds[ dayOfWeekLEDs_off[day][i] ] = weekendOff;
    }
    for (int i = 0; i < 6; i++) {
      leds[ dayOfWeekLEDs_on[day][i] ] = weekday;
    }
  } else { // weekend
  for (int i = 0; i < 15; i++) {
      leds[ dayOfWeekLEDs_off[day][i] ] = weekdayOff;
    }
    for (int i = 15; i < 18; i++) {
      leds[ dayOfWeekLEDs_off[day][i] ] = weekendOff;
    }
    for (int i = 0; i < 6; i++) {
      leds[ dayOfWeekLEDs_on[day][i] ] = weekend;
    }
  }
}

// ======== Draw current time in one of three defined sizes ========

void drawClock (byte variant, CHSV color) {
  errorTime = !timeClient.isTimeSet();
  timeClient.update();

  switch (variant) {
    case 1:
      drawArray( &numbers6x8[0][0][0], timeClient.getHours() / 10, 1, 0, 6, 8, color);
      drawArray( &numbers6x8[0][0][0], timeClient.getHours() % 10, 8, 0, 6, 8, color);

      if ( frameCounter % 20 > 10 ) {
        drawArray ( &colon2x6[0][0][0], 0, 15, 1, 2, 6, color);
      }

      drawArray( &numbers6x8[0][0][0], timeClient.getMinutes() / 10, 18, 0, 6, 8, color);
      drawArray( &numbers6x8[0][0][0], timeClient.getMinutes() % 10, 25, 0, 6, 8, color);

      break;
    case 2:
      drawArray( &numbers4x8[0][0][0], timeClient.getHours() / 10, 0, 0, 4, 8, color);
      drawArray( &numbers4x8[0][0][0], timeClient.getHours() % 10, 5, 0, 4, 8, color);

      if ( frameCounter % 20 > 10 ) {
        drawArray ( &colon1x4[0][0][0], 0, 10, 2, 1, 4, color);
      }

      drawArray( &numbers4x8[0][0][0], timeClient.getMinutes() / 10, 12, 0, 4, 8, color);
      drawArray( &numbers4x8[0][0][0], timeClient.getMinutes() % 10, 17, 0, 4, 8, color);

      break;
    case 3:
      drawArray( &numbers3x6[0][0][0], timeClient.getHours() / 10, 0, 0, 3, 6, color);
      drawArray( &numbers3x6[0][0][0], timeClient.getHours() % 10, 4, 0, 3, 6, color);

      if ( frameCounter % 20 > 10 ) {
        drawArray ( &colon1x4[0][0][0], 0, 8, 1, 1, 4, color);
      }

      drawArray( &numbers3x6[0][0][0], timeClient.getMinutes() / 10, 10, 0, 3, 6, color);
      drawArray( &numbers3x6[0][0][0], timeClient.getMinutes() % 10, 14, 0, 3, 6, color);
      break;
    default:
      break;
  };
}

// ======== Draw current temperature with small numbers ========

void drawTemp (byte x, byte y, CHSV color) {
  int temp = tempLater > 0 ? int(tempLater+0.5) : int(tempLater-0.5);
  
  if ( temp < 0 ) {
    if ( temp / 10 == 0 ) {
      drawArray( &minus[0][0][0], 0, x+4, y+2, 2, 1, color);
    } else {
      drawArray( &minus[0][0][0], 0, x, y+2, 2, 1, color);  
    }
  }

  temp = abs(temp);
  if ( temp / 10 > 0 ) {
    drawArray( &numbers3x5[0][0][0], temp / 10, x+3, y, 3, 5, color);
    drawArray( &numbers3x5[0][0][0], temp % 10, x+7, y, 3, 5, color);
    leds[ mapToMatrix(x+1,y,"ul") ] = color;
  } else {
    drawArray( &numbers3x5[0][0][0], temp % 10, x+7, y, 3, 5, color);
    leds[ mapToMatrix(x+5,y,"ul") ] = color;
  }
}

// ======== Draw background weather animation ======== 

void drawWeather (short weatherID, byte brightness) {
  errorWeather = 0;
  switch (weatherID){
    case 200:
    case 201:
    case 202: // Thunderstorm with rain
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherRain[0][0][0], frameCounter%10, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      drawArray( &weatherThunderstorm[0][0][0], frameCounter%60 < 3 ? frameCounter%60 : 0, 21, 1, 3, 7, CHSV(64, 255, brightness));
      drawArray( &weatherThunderstorm[0][0][0], (frameCounter+20)%60 < 3 ? (frameCounter+20)%60 : 0, 26, 1, 3, 7, CHSV(64, 255, brightness));
      break;
    case 210:
    case 211:
    case 212:
    case 221: // Thunderstorm without rain
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherThunderstorm[0][0][0], frameCounter%60 < 3 ? frameCounter%60 : 0, 21, 1, 3, 7, CHSV(64, 255, brightness));
      drawArray( &weatherThunderstorm[0][0][0], (frameCounter+20)%60 < 3 ? (frameCounter+20)%60 : 0, 26, 1, 3, 7, CHSV(64, 255, brightness));
      break;
    case 230:
    case 231:
    case 232: // Thunderstorm with drizzle
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherDrizzle[0][0][0], frameCounter%20, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      drawArray( &weatherThunderstorm[0][0][0], frameCounter%60 < 3 ? frameCounter%60 : 0, 21, 1, 3, 7, CHSV(64, 255, brightness));
      drawArray( &weatherThunderstorm[0][0][0], (frameCounter+20)%60 < 3 ? (frameCounter+20)%60 : 0, 26, 1, 3, 7, CHSV(64, 255, brightness));
      break;
    case 300:
    case 301:
    case 302: // Drizzle
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherDrizzle[0][0][0], frameCounter%20, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      break;
    case 500: // Light rain
      drawArray( &weatherClear[0][0][0], 0, 24, 0, 6, 6, CHSV(56, 255, brightness/2));
      drawArray( &weatherClear[0][0][0], 1, 24, 0, 6, 6, CHSV(50, 255, brightness/4));
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherDrizzle[0][0][0], frameCounter%20, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      break;
    case 501:
    case 502:
    case 503:
    case 504: // Rain
      drawArray( &weatherClear[0][0][0], 0, 24, 0, 6, 6, CHSV(56, 255, brightness/2));
      drawArray( &weatherClear[0][0][0], 1, 24, 0, 6, 6, CHSV(50, 255, brightness/4));
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherRain[0][0][0], frameCounter%10, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      break;
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 321: // Drizzle rain
    case 520:
    case 521:
    case 522:
    case 531: // Shower rain
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherRain[0][0][0], frameCounter%10, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      break;
    case 511: // Freezing rain
    case 615:
    case 616: // Snow rain
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherRain[0][0][0], frameCounter%10, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      drawArray( &weatherSnow[0][0][0], (frameCounter+18)%80/4, 12, 0, 20, 8, CHSV(0, 0, brightness/4));
      break;
    case 611:
    case 612:
    case 613: // Sleet
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherDrizzle[0][0][0], frameCounter%20, 12, 0, 20, 8, CHSV(150, 128, brightness/8));
      drawArray( &weatherSnow[0][0][0], (frameCounter+18)%80/4, 12, 0, 20, 8, CHSV(0, 0, brightness/4));
      break;
    case 600:
    case 601:
    case 602: // Snow
    case 620:
    case 621:
    case 622: // Shower snow
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      drawArray( &weatherSnow[0][0][0], frameCounter%80/4, 12, 0, 20, 8, CHSV(0, 0, brightness/4));
      drawArray( &weatherSnow[0][0][0], (frameCounter+18)%80/4, 12, 0, 20, 8, CHSV(0, 0, brightness/4));
      break;
    case 701:
    case 711:
    case 721:
    case 731:
    case 741:
    case 751:
    case 761:
    case 762:
    case 771:
    case 781: // Atmosphere
      drawArray( &weatherAtmosphere[0][0][0], frameCounter%40/20, 12, 0, 20, 8, CHSV(0, 0, brightness/4));
      drawArray( &weatherAtmosphere[0][0][0], (frameCounter+10)%40/20+2, 12, 0, 20, 8, CHSV(0, 0, brightness/16));
      break;
    case 800: // Clear
      drawArray( &weatherClear[0][0][0], 0, 24, 0, 6, 6, CHSV(56, 255, brightness/2));
      drawArray( &weatherClear[0][0][0], 1, 24, 0, 6, 6, CHSV(50, 255, brightness/4));
      break;
    case 801:
    case 802: // Scattered clouds
      drawArray( &weatherClear[0][0][0], 0, 24, 0, 6, 6, CHSV(56, 255, brightness/2));
      drawArray( &weatherClear[0][0][0], 1, 24, 0, 6, 6, CHSV(50, 255, brightness/4));
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      break;
    case 803:
    case 804: // Clouds
      drawArray( &weatherClouds[0][0][0], frameCounter%80/10, 16, 0, 16, 6, CHSV(0, 0, brightness/16));
      break;
    default:
      errorWeather = 1;
      break;
  };
}

// ======== Draw error indicators in upper right corner of matrix ======== 

void drawErrors (byte brightness){
  if ( errorConnection ) {
    leds[ mapToMatrix(0,0,"ur") ] = CHSV(0, 255, brightness);
  }
  if ( errorJson ) {
    leds[ mapToMatrix(1,0,"ur") ] = CHSV(0, 255, brightness);
  }
  if ( errorWeather ) {
    leds[ mapToMatrix(2,0,"ur") ] = CHSV(0, 255, brightness);
  }
  if ( errorTime ) {
    leds[ mapToMatrix(3,0,"ur") ] = CHSV(0, 255, brightness);
  }
  if ( errorDisplay ) {
    leds[ mapToMatrix(4,0,"ur") ] = CHSV(0, 255, brightness);
  }
}
